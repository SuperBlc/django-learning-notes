Django高级扩展

	静态文件：css, js, 图片, json文件, 字体文件等
		使用：在settings.py文件中，添加STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

	中间件：轻量级、底层插件，可以介入Django的请求和响应
		本质：Python类
		方法：__init__ 不需要传参数，服务器响应第一个请求的时候自动调用，用于决定是否启用该中间件
			
			process_request(self, request) 
			在视图执行之前调用（分配url匹配视图之前），每个请求上都会调用，返回None或者HttpResponse对象

			process_view(self, request, view_func, view_args, view_kwargs)
			调用视图之前执行，每个请求都会调用，返回None或者HttpResponse对象

			process_template_response(self, request, response)
			在视图刚好执行完后调用，每个请求都会调用，返回None或者HttpResponse对象
			使用render

			process_response(self, request, reponse)
			所有响应返回浏览器之前调用，每个请求都会被调用，返回HttpResponse对象

			process_exception(self, request, exception)
			当视图抛出异常时调用，返回HttpResponse对象

		自定义中间件：配置settings.py MIDDLEWARE中添加

	上传图片：文件上传时，文件数据存储在request.FILES属性中
			form表单要上传文件需要加 enctype="multipart/form-data"
			上传文件必须是post请求
		存储路径：
			1.static目录下创建一个文件夹用于存储上传的文件
			2.配置settings.py文件，添加"MEDIA_ROOT=os.path.join(BASE_DIR, "static", "上传文件存储文件夹名")"

	分页：
		Paginator对象
			创建对象：格式-->Paginator(list, integer)
					返回值：返回一个分页对象
			属性：
				count 对象总数
				num_pages 页面总数
				page_range 页码列表
			方法：
				page(num)：会得到一个Page对象，如果所给页数不存在，抛出InvalidPage异常
				get_page(num):会得到一个Page对象，同时会处理页数越界和非法页数的异常            
			异常：
				InvalidPage 当paginator传递了一个无效的页码抛出该异常
				EmptyPage page()给的是有效的值但page中没有objects
				PageNotAnInteger 页码不是整数

		Page对象：由Paginator.page()返回得到，不需要手动创建
			属性：
				object_list 在此页中所有对象的列表
				number  此页的页码
				paginator 当前page对象关联的paginator对象
			方法：
				has_next() 判断是否有下一页，如果有返回True
				has_previous() 判断是否有上一页，有则返回True
				has_other_pages() 是否有前一页或者后一页，有则返回True
				next_page_number() 返回下一页的页码，不存在则抛出InvalidPage异常
				previous_page_number() 前一页的页码，不存在则抛出InvalidPage异常
				start_index() 此页中第一个对象的索引
				end_index() 此页中的最后一个对象的索引

		富文本：
			安装：pip install django-tinymce
			使用场景：
				在站点中使用 
					配置settings.py
						1.INSTALLED_APPS 中添加 'tinymce'
						2.文件末尾添加 TINYMCE_DEFAULT_CONFIG = {
							'theme':'advance',
							'width':600,
							'height':400,
						}
					创建一个模型类
						from tinymce.models import HTMLField
						class Text(models.Model):
							str = HTMLField()
					配置站点：
						from .models import Text
						admin.site.register(Text)
				在自定义视图中使用

		Celery(分布式任务队列)：http://docs.jinkan.org/docs/celery/index.html
			问题：
				1.用户发起request，并且要等待response返回，但是在视图中有一些耗时的操作，导致用户等待，降低体验性
				2.网站每隔一段时间要同步一次数据，但http请求是需要触发的
			解决：
				celery：
					任务task 本质是一个python函数，将耗时操作封装成一个函数
					队列queue 将要执行的任务放队列里
					工人worker 负责执行队列中的任务
					代理broker 负责调度，在部署环境中使用redis
				安装：
					pip install celery
					pip install celery-with-redis
					pip install django-celery
				配置：
					在 settings.py文件中添加celery的配置
					import djcelery
					djcelery.setup_loader() # 初始化
					BROKER_URL = 'redis://:redis密码@主机:端口(6379)/0'
					CELERY_IMPORTS = ('myapp.task)
				在应用目录下创建task.py文件

				迁移，生成 celery需要的数据库表 python manage.py migrate




