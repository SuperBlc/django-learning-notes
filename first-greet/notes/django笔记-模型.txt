直接访问数据的情况：迭代、序列化、与if合用

返回查询集的方法称为过滤器：all、
                        filter：返回符合条件的数据，filter(键=值),filter(键=值，键=值),filter(键=值).filter(键=值)
                        exclude：过滤掉符合条件的数据
                        order_by：排序
                        values：一条数据就是一个对象

返回单个数据：get, count, first, last, exists





字段查询：实现了sql中的where语句，作为方法filter()、exclude()、get()的参数
————————
    |语法：属性名称__比较运算符=值  （属性名和比较运算符之间是2条下划线）
    |
    |外键：属性名_id
    |
    |转义：like语句中使用%是为了匹配占位，匹配数据中的%（where like '\%'），需要转义
    |
    |比较运算符：exact：判断，大小写敏感
    |           contains：是否包含，大小写敏感
    |           startswith, endswith：以value开头，大小写敏感
    |           以上四个比较运算符在前面加上i，就可以不区分大小写
    |           ---------------
    |           isnull, isnotnull
    |           in：是否包含在范围内
    |           gt：大于
    |           lt：小于S
    |           gte：大于等于
    |           lte：小于等于
    |           ---------------
    |           year
    |           month
    |           day
    |           week_day
    |           hour
    |           minute
    |           second
    |           ---------------
    |           跨关联查询：处理join查询，模型类名__属性名__比较运算符
    |           查询快捷：pk，代表主键
    |           例：grade = Grade.objects.filter(student__info__contains='大家好')
    |           解释：info中带有‘大家好’这三个字的数据，属于哪个班级
    |
    |from django.db.models import 聚合函数[Avg,Count,Max,Min,Sum]
    |聚合函数：使用aggregate()返回聚合函数的值
    |            Avg
    |            Count
    |            Max
    |            Min
    |            Sum
    |
    |F对象：可以使用模型的A属性与B属性进行比较，F对象支持算术运算
    |        from django.db.models import F
    |
    |Q对象：过滤器的方法中的关键字参数，条件为And模式
    |       from django.db.models import Q       
    |       如果想实现or查询，模型.管理器.filter(Q(条件)|Q(条件))
    |       模型.管理器.filter(Q(条件)) 只有一个Q对象，就是用于匹配
    |       模型.管理器.filter(~Q(条件)) 取反
